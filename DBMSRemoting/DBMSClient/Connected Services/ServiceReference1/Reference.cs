//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DBMSClient.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Table", Namespace="http://schemas.datacontract.org/2004/07/DBMS.Core")]
    [System.SerializableAttribute()]
    public partial class Table : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DBMSClient.ServiceReference1.Column[] columnsListField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DBMSClient.ServiceReference1.Row[] rowsListField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DBMSClient.ServiceReference1.Column[] columnsList {
            get {
                return this.columnsListField;
            }
            set {
                if ((object.ReferenceEquals(this.columnsListField, value) != true)) {
                    this.columnsListField = value;
                    this.RaisePropertyChanged("columnsList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DBMSClient.ServiceReference1.Row[] rowsList {
            get {
                return this.rowsListField;
            }
            set {
                if ((object.ReferenceEquals(this.rowsListField, value) != true)) {
                    this.rowsListField = value;
                    this.RaisePropertyChanged("rowsList");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Column", Namespace="http://schemas.datacontract.org/2004/07/DBMS.Core")]
    [System.SerializableAttribute()]
    public partial class Column : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string customTypeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string customTypeName {
            get {
                return this.customTypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.customTypeNameField, value) != true)) {
                    this.customTypeNameField = value;
                    this.RaisePropertyChanged("customTypeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Row", Namespace="http://schemas.datacontract.org/2004/07/DBMS.Core")]
    [System.SerializableAttribute()]
    public partial class Row : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] valuesListField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] valuesList {
            get {
                return this.valuesListField;
            }
            set {
                if ((object.ReferenceEquals(this.valuesListField, value) != true)) {
                    this.valuesListField = value;
                    this.RaisePropertyChanged("valuesList");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IDBMSService")]
    public interface IDBMSService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBMSService/CreateDatabase", ReplyAction="http://tempuri.org/IDBMSService/CreateDatabaseResponse")]
        bool CreateDatabase(string databaseName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBMSService/CreateDatabase", ReplyAction="http://tempuri.org/IDBMSService/CreateDatabaseResponse")]
        System.Threading.Tasks.Task<bool> CreateDatabaseAsync(string databaseName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBMSService/AddEmptyTableWithName", ReplyAction="http://tempuri.org/IDBMSService/AddEmptyTableWithNameResponse")]
        bool AddEmptyTableWithName(string newTableName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBMSService/AddEmptyTableWithName", ReplyAction="http://tempuri.org/IDBMSService/AddEmptyTableWithNameResponse")]
        System.Threading.Tasks.Task<bool> AddEmptyTableWithNameAsync(string newTableName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBMSService/AddTable", ReplyAction="http://tempuri.org/IDBMSService/AddTableResponse")]
        bool AddTable(DBMSClient.ServiceReference1.Table newTable);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBMSService/AddTable", ReplyAction="http://tempuri.org/IDBMSService/AddTableResponse")]
        System.Threading.Tasks.Task<bool> AddTableAsync(DBMSClient.ServiceReference1.Table newTable);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBMSService/GetTable", ReplyAction="http://tempuri.org/IDBMSService/GetTableResponse")]
        DBMSClient.ServiceReference1.Table GetTable(int index);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBMSService/GetTable", ReplyAction="http://tempuri.org/IDBMSService/GetTableResponse")]
        System.Threading.Tasks.Task<DBMSClient.ServiceReference1.Table> GetTableAsync(int index);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBMSService/AddColumn", ReplyAction="http://tempuri.org/IDBMSService/AddColumnResponse")]
        bool AddColumn(int tableIndex, string columnName, string customTypeName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBMSService/AddColumn", ReplyAction="http://tempuri.org/IDBMSService/AddColumnResponse")]
        System.Threading.Tasks.Task<bool> AddColumnAsync(int tableIndex, string columnName, string customTypeName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBMSService/AddRow", ReplyAction="http://tempuri.org/IDBMSService/AddRowResponse")]
        bool AddRow(int tableIndex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBMSService/AddRow", ReplyAction="http://tempuri.org/IDBMSService/AddRowResponse")]
        System.Threading.Tasks.Task<bool> AddRowAsync(int tableIndex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBMSService/ChangeValue", ReplyAction="http://tempuri.org/IDBMSService/ChangeValueResponse")]
        bool ChangeValue(string newValue, int tableIndex, int columnIndex, int rowIndex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBMSService/ChangeValue", ReplyAction="http://tempuri.org/IDBMSService/ChangeValueResponse")]
        System.Threading.Tasks.Task<bool> ChangeValueAsync(string newValue, int tableIndex, int columnIndex, int rowIndex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBMSService/DeleteRow", ReplyAction="http://tempuri.org/IDBMSService/DeleteRowResponse")]
        bool DeleteRow(int tableIndex, int rowIndex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBMSService/DeleteRow", ReplyAction="http://tempuri.org/IDBMSService/DeleteRowResponse")]
        System.Threading.Tasks.Task<bool> DeleteRowAsync(int tableIndex, int rowIndex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBMSService/DeleteColumn", ReplyAction="http://tempuri.org/IDBMSService/DeleteColumnResponse")]
        bool DeleteColumn(int tableIndex, int columnIndex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBMSService/DeleteColumn", ReplyAction="http://tempuri.org/IDBMSService/DeleteColumnResponse")]
        System.Threading.Tasks.Task<bool> DeleteColumnAsync(int tableIndex, int columnIndex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBMSService/DeleteTable", ReplyAction="http://tempuri.org/IDBMSService/DeleteTableResponse")]
        bool DeleteTable(int tableIndex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBMSService/DeleteTable", ReplyAction="http://tempuri.org/IDBMSService/DeleteTableResponse")]
        System.Threading.Tasks.Task<bool> DeleteTableAsync(int tableIndex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBMSService/SaveCurrentDatabase", ReplyAction="http://tempuri.org/IDBMSService/SaveCurrentDatabaseResponse")]
        bool SaveCurrentDatabase();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBMSService/SaveCurrentDatabase", ReplyAction="http://tempuri.org/IDBMSService/SaveCurrentDatabaseResponse")]
        System.Threading.Tasks.Task<bool> SaveCurrentDatabaseAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBMSService/LoadDatabase", ReplyAction="http://tempuri.org/IDBMSService/LoadDatabaseResponse")]
        bool LoadDatabase(string databaseName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBMSService/LoadDatabase", ReplyAction="http://tempuri.org/IDBMSService/LoadDatabaseResponse")]
        System.Threading.Tasks.Task<bool> LoadDatabaseAsync(string databaseName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBMSService/GetTablesNameList", ReplyAction="http://tempuri.org/IDBMSService/GetTablesNameListResponse")]
        string[] GetTablesNameList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBMSService/GetTablesNameList", ReplyAction="http://tempuri.org/IDBMSService/GetTablesNameListResponse")]
        System.Threading.Tasks.Task<string[]> GetTablesNameListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBMSService/CartesianProduct", ReplyAction="http://tempuri.org/IDBMSService/CartesianProductResponse")]
        DBMSClient.ServiceReference1.Table CartesianProduct(DBMSClient.ServiceReference1.Table firstTable, DBMSClient.ServiceReference1.Table secondTable);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBMSService/CartesianProduct", ReplyAction="http://tempuri.org/IDBMSService/CartesianProductResponse")]
        System.Threading.Tasks.Task<DBMSClient.ServiceReference1.Table> CartesianProductAsync(DBMSClient.ServiceReference1.Table firstTable, DBMSClient.ServiceReference1.Table secondTable);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDBMSServiceChannel : DBMSClient.ServiceReference1.IDBMSService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DBMSServiceClient : System.ServiceModel.ClientBase<DBMSClient.ServiceReference1.IDBMSService>, DBMSClient.ServiceReference1.IDBMSService {
        
        public DBMSServiceClient() {
        }
        
        public DBMSServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DBMSServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DBMSServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DBMSServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool CreateDatabase(string databaseName) {
            return base.Channel.CreateDatabase(databaseName);
        }
        
        public System.Threading.Tasks.Task<bool> CreateDatabaseAsync(string databaseName) {
            return base.Channel.CreateDatabaseAsync(databaseName);
        }
        
        public bool AddEmptyTableWithName(string newTableName) {
            return base.Channel.AddEmptyTableWithName(newTableName);
        }
        
        public System.Threading.Tasks.Task<bool> AddEmptyTableWithNameAsync(string newTableName) {
            return base.Channel.AddEmptyTableWithNameAsync(newTableName);
        }
        
        public bool AddTable(DBMSClient.ServiceReference1.Table newTable) {
            return base.Channel.AddTable(newTable);
        }
        
        public System.Threading.Tasks.Task<bool> AddTableAsync(DBMSClient.ServiceReference1.Table newTable) {
            return base.Channel.AddTableAsync(newTable);
        }
        
        public DBMSClient.ServiceReference1.Table GetTable(int index) {
            return base.Channel.GetTable(index);
        }
        
        public System.Threading.Tasks.Task<DBMSClient.ServiceReference1.Table> GetTableAsync(int index) {
            return base.Channel.GetTableAsync(index);
        }
        
        public bool AddColumn(int tableIndex, string columnName, string customTypeName) {
            return base.Channel.AddColumn(tableIndex, columnName, customTypeName);
        }
        
        public System.Threading.Tasks.Task<bool> AddColumnAsync(int tableIndex, string columnName, string customTypeName) {
            return base.Channel.AddColumnAsync(tableIndex, columnName, customTypeName);
        }
        
        public bool AddRow(int tableIndex) {
            return base.Channel.AddRow(tableIndex);
        }
        
        public System.Threading.Tasks.Task<bool> AddRowAsync(int tableIndex) {
            return base.Channel.AddRowAsync(tableIndex);
        }
        
        public bool ChangeValue(string newValue, int tableIndex, int columnIndex, int rowIndex) {
            return base.Channel.ChangeValue(newValue, tableIndex, columnIndex, rowIndex);
        }
        
        public System.Threading.Tasks.Task<bool> ChangeValueAsync(string newValue, int tableIndex, int columnIndex, int rowIndex) {
            return base.Channel.ChangeValueAsync(newValue, tableIndex, columnIndex, rowIndex);
        }
        
        public bool DeleteRow(int tableIndex, int rowIndex) {
            return base.Channel.DeleteRow(tableIndex, rowIndex);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteRowAsync(int tableIndex, int rowIndex) {
            return base.Channel.DeleteRowAsync(tableIndex, rowIndex);
        }
        
        public bool DeleteColumn(int tableIndex, int columnIndex) {
            return base.Channel.DeleteColumn(tableIndex, columnIndex);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteColumnAsync(int tableIndex, int columnIndex) {
            return base.Channel.DeleteColumnAsync(tableIndex, columnIndex);
        }
        
        public bool DeleteTable(int tableIndex) {
            return base.Channel.DeleteTable(tableIndex);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteTableAsync(int tableIndex) {
            return base.Channel.DeleteTableAsync(tableIndex);
        }
        
        public bool SaveCurrentDatabase() {
            return base.Channel.SaveCurrentDatabase();
        }
        
        public System.Threading.Tasks.Task<bool> SaveCurrentDatabaseAsync() {
            return base.Channel.SaveCurrentDatabaseAsync();
        }
        
        public bool LoadDatabase(string databaseName) {
            return base.Channel.LoadDatabase(databaseName);
        }
        
        public System.Threading.Tasks.Task<bool> LoadDatabaseAsync(string databaseName) {
            return base.Channel.LoadDatabaseAsync(databaseName);
        }
        
        public string[] GetTablesNameList() {
            return base.Channel.GetTablesNameList();
        }
        
        public System.Threading.Tasks.Task<string[]> GetTablesNameListAsync() {
            return base.Channel.GetTablesNameListAsync();
        }
        
        public DBMSClient.ServiceReference1.Table CartesianProduct(DBMSClient.ServiceReference1.Table firstTable, DBMSClient.ServiceReference1.Table secondTable) {
            return base.Channel.CartesianProduct(firstTable, secondTable);
        }
        
        public System.Threading.Tasks.Task<DBMSClient.ServiceReference1.Table> CartesianProductAsync(DBMSClient.ServiceReference1.Table firstTable, DBMSClient.ServiceReference1.Table secondTable) {
            return base.Channel.CartesianProductAsync(firstTable, secondTable);
        }
    }
}
